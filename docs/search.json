[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Welcome to the R Consortium R Submissions Pilot 4 documentation portal. You will find key materials, discussion notes, and additional information related to this pilot. To learn more about the submissions working group, please visit rconsortium.github.io/submissions-wg/."
  },
  {
    "objectID": "index.html#objective",
    "href": "index.html#objective",
    "title": "Introduction",
    "section": "Objective",
    "text": "Objective\nBuilding upon the Submissions Pilot 2 in which a Shiny application created as an R package was successfully transferred to the FDA using the eCTD gateway protocol, the objective of Pilot 4 is to explore novel technologies to bundle the application along with the necessary execution dependencies and streamline the transfer and execution procedures. The specific technologies targeted in this pilot are the following:\n\nContainers: A mechanism to encapsulate a piece of software alongside the environment used for its dependencies and execution. The end user simply needs a container runtime installed on their system to execute a container.\nWebAssembly: A framework inspired by assembly in which applications developed in languages such as JavaScript, Python, and now R can be compiled into a self-contained native bundle that can be executed directly in a user’s modern web browser, without requiring additional software on their host system."
  },
  {
    "objectID": "minutes_prep.html#date-selection",
    "href": "minutes_prep.html#date-selection",
    "title": "Minutes Document Writer",
    "section": "Date Selection",
    "text": "Date Selection\nUse the date input below to choose the date of the meeting. Click the calendar icon in the widget to launch the UI.\n\nviewof meeting_date = Inputs.date({\n  label: \"Meeting Date\",\n  value: \"2023-08-04\"\n})\n\n\n\n\n\n\n\nmeeting_year = (meeting_date.getFullYear()).toString()\nmeeting_month = (meeting_date.getMonth() + 1).toString().padStart(2, \"0\")\nmeeting_day = (meeting_date.getDate() + 1).toString().padStart(2, \"0\")\n\nmeeting_array = [meeting_year, meeting_month, meeting_day]\nmeeting_print = meeting_array.join(\"-\")"
  },
  {
    "objectID": "minutes_prep.html#attendee-selection",
    "href": "minutes_prep.html#attendee-selection",
    "title": "Minutes Document Writer",
    "section": "Attendee Selection",
    "text": "Attendee Selection\nUse the personnel table below to select the attendees present at the meeting by checking the box that appears once you hover your cursor above a name. The table is ordered alphabetically by first name as default, but you can sort by a different column by clicking the column name.\n\n\n\n\n\n\nWarning\n\n\n\nIf an attendee is not listed in this table, please add their name, affiliation, and affiliation URL to the wg_attendees.xlsx spreadsheet located in the data subdirectory of this repository. After your edits to the spreadsheet are completed, re-build the Quarto site.\n\n\n\ndata2 = transpose(people_data)\n\n\n\n\n\n\n\nviewof people_selection = Inputs.table(data2, {\n  sort: \"name\",\n  multiple: true,\n  rows: 40,\n  required: false\n})"
  },
  {
    "objectID": "minutes_prep.html#setup",
    "href": "minutes_prep.html#setup",
    "title": "Minutes Document Writer",
    "section": "Setup",
    "text": "Setup\nIn your local copy of this repository, create a sub-directory within the minutes directory to hold files associated with this meeting’s minutes. Based on your selection above, create the following directory:\n\nmeeting_print\n\n\n\n\n\n\nCopy the text in the output below into a new Quarto document named index.qmd.\n\nsilly = html`${Array.from(new Set(people_selection.map(c => c.name2)))\n.sort()\n.map(c => `- ${c}`)\n.join(\"\\n\")}`\n\nsilly2 = html`<pre>---\ntitle: \"Minutes ${meeting_print}\"\ndate: ${meeting_print}\n---\n\n::: {.callout-tip collapse=\"true\"}\n## View Attendee List\n\n${silly}\n:::\n\n## Add Minutes Here\n\n</pre>`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsilly2"
  },
  {
    "objectID": "minutes.html",
    "href": "minutes.html",
    "title": "Meeting Minutes",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nMar 8, 2024\n\n\nMinutes 2024-03-08\n\n\nEric Nantz\n\n\n\n\nOct 23, 2023\n\n\nMinutes 2023-10-23\n\n\nEric Nantz\n\n\n\n\nAug 18, 2023\n\n\nMinutes 2023-08-18\n\n\nEric Nantz\n\n\n\n\nAug 4, 2023\n\n\nMinutes 2023-08-04\n\n\nEric Nantz\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "minutes/2023-08-04/index.html",
    "href": "minutes/2023-08-04/index.html",
    "title": "Minutes 2023-08-04",
    "section": "",
    "text": "View Attendee List\n\n\n\n\n\n\nAndrew Borgman (Bristol Myers Squibb)\nAndré Veríssimo (Appsilon)\nEric Nantz (Eli Lilly)\nIsmael Alejandro Rodriguez Rodriguez (Appsilon)\nIwona Matyjaszek (Appsilon)\nMariusz Helim (Appsilon)\nNate Mockler (Biogen)\nPaweł Rzymkiewicz (Appsilon)\nPedro Silva (Appsilon)\nSam Parmar (Pfizer)\nVedha Viyash (Appsilon)"
  },
  {
    "objectID": "minutes/2023-08-04/index.html#recap-of-container-webassembly-prototypes",
    "href": "minutes/2023-08-04/index.html#recap-of-container-webassembly-prototypes",
    "title": "Minutes 2023-08-04",
    "section": "Recap of Container / WebAssembly Prototypes",
    "text": "Recap of Container / WebAssembly Prototypes\nAppsilon’s team joined the call to share progress and key takeaways from their investigation into the container and WebAssembly approaches to serve the Pilot 2 Shiny application. You can view their slides here as well as the code repository for the container files at github.com/Appsilon/experimental-fda-submission-4-podman/. Highlights of the summary:\n\nThe container version of the application has no issues replicating the experience of the Pilot 2 version. The end user needs to have podman installed on their machine.\nAnother requirement is the user is able to access an image repository that holds container images used to build the container\nFDA is actively investigating the process of getting podman available on their machines, and verifying how they can access pre-built container images.\n\nWebAssembly summary:\n\nAn early prototype that uses a built-in R data set with certain features such as Teal module filters is available at shiny-standalone-webr-demo.netlify.app/, with the code available at github.com/Appsilon/experimental-teal-webr-demo.\nDue to complexities with compiling R packages, it is not currently feasible to replicate the Pilot 2 application in terms of dependencies, especially true for R packages that require custom compilation.\nThe development of WebR is very fast moving. Hence there can be weekly changes to the base API of how it works\nThe current state requires that the user run a web-based serving platform in order for the app to be compiled in the browser. We will have further discussions on what is the easiest way the FDA reviewers could install a simple web-serving runtime in order to run the app."
  },
  {
    "objectID": "minutes/2023-08-04/index.html#recent-feedback-from-fda",
    "href": "minutes/2023-08-04/index.html#recent-feedback-from-fda",
    "title": "Minutes 2023-08-04",
    "section": "Recent Feedback from FDA",
    "text": "Recent Feedback from FDA\nIn a previous call, Eric shared the current status of the container and WebAssembly prototypes with FDA reviewers with Paule Schuette and Hye-Soo Cho. The biggest takeways are the following:\n\nThere are a few logistics to sort out with the container runtime. Paul mentioned that their group does not currently have podman installed, and they will need to discuss their IT group. Another group within FDA utilizes podman and a custom image registry, which should help in the process.\nThe FDA reviewers see great potential in the WebAssembly version of the Pilot. In light of the aforementioned constraints on package installation, they agree with creating a minimal version of the Pilot 2 application that uses dependencies available in the current package list of WebR-compliant packages. The purpose of this pilot is to explore the feasibility of novel methods of encapsulating and transferring the application, and they do not want to hold back the WebAssembly effort by trying to replicate the Pilot 2 application verbatim.\nPaul and Hye-Soo shared clarifications regarding the transfer of files in the electronic submission. In Pilot 2, the development team utilized pkglite to bundle the R scripts and other package files as a text file, which required the FDA reviewers to un-bundle the package on their local computers before proceeding with the rest of the application installation and execution. However, it was clarified that sponsors could assemble the artifacts of a submission into a .zip archive, bringing much more flexibility to how we can transfer the files necessary for Pilot 4."
  },
  {
    "objectID": "minutes/2023-08-04/index.html#next-steps",
    "href": "minutes/2023-08-04/index.html#next-steps",
    "title": "Minutes 2023-08-04",
    "section": "Next Steps",
    "text": "Next Steps\n\nExplore options for installing the necessary runtime for executing the WebAssembly version of the application.\nContinue dialog with the FDA reviewers on their container setup and ability to access public image repositories."
  },
  {
    "objectID": "minutes/2023-08-18/index.html",
    "href": "minutes/2023-08-18/index.html",
    "title": "Minutes 2023-08-18",
    "section": "",
    "text": "View Attendee List\n\n\n\n\n\n\nAndré Veríssimo (Appsilon)\nEric Nantz (Eli Lilly)\nGeorge Stagg (Posit)\nPaweł Rzymkiewicz (Appsilon)\nSam Parmar (Pfizer)\nWinston Chang (Posit)"
  },
  {
    "objectID": "minutes/2023-08-18/index.html#web-assembly-and-webr-discussion",
    "href": "minutes/2023-08-18/index.html#web-assembly-and-webr-discussion",
    "title": "Minutes 2023-08-18",
    "section": "Web-assembly and WebR Discussion",
    "text": "Web-assembly and WebR Discussion\n\nGeorge Stagg and Winston Chang joined our working group session to discuss the web-assembly portion of Pilot 4\nTo run the web-assembly version of the application, the app must be executed in a web server\nThe {httpuv}` R package provides a shim that webR uses within Appsilon’s teal webR demo app which is similar to a setup with a Python Shiny app running in Shinylive\nIn the (near) future, there will be a Shinylive R version with a package that helps the user create static files directly from a Shiny app written in R.\nFor this pilot, we could send the FDA reviewers a simple R script that sets up {httpuv} to run a web server that outputs a link they can click on to view the application locally. In fact, there is now a new function called runStaticServer in the development version of {httpuv} that could be used. Hopefully the new version of {httpuv} will land on CRAN soon.\nNow that we’ve verified that the FDA reviewers can accept compressed archives (.zip) inside a transfer in the eCTD gateway, the Pilot 4 app files could be compressed into an archive that uppacks to a directory containing all of the webR and web-assembly files in a subdirectory, with an R script that starts {httpuv} and runs the files and outputs a local link to view the app.\nVerified that R 4.2.2 (version used for the Pilot 2 application) contains binary installations of {httpuv}\nWeb-assembly applications creat a virtual file system as part of its execution. In terms of how additional R packges are loaded into the application, it is recommended to have these packages in the virtual file system.\nThe package .tar.gz installers can be downloaded from the WebR binary R package repository and stored in the compressed archive for the app.\nThere aren’t real benefits to having Shiny-related packages included directly in the WebR runtime, as we aren’t in the early days of tech anymore\nInitial loading of the app requires an upfront step of reading the package files in the web-assembly process that takes a bit of time\nTo enhance the current Appsilon web-assembly demo app, we need to download the binary .tar.gz installers of the package files as part of the package remote sources. It would also required the creation of a PACKAGES text file which can be done in R directly as seen in this documentation.\nIf we need to obtain a specific version of the web-assembly engine, it could be done via Node and NPM if that is a critical need.\nDown the road, it might be possible to save a particular version of the web browser as a way to ensure web-assembly runtime reproducibility\nGeorge reported that he’s had situations were the same binaries used in a web-assembly app led to different results\nGeorge recommends that instead of downloading the WebR minified JS from a CDN, that we download the minified JS and store it in the app archive. Hence changing the lines here to a relative URL.\nA key advantage from a security standpoint is that any binaries executed by web-assembly are gauranteed to be running in a browser and using a sandboxed virtual file system, which would eliminate possibilities of any host system modifications."
  },
  {
    "objectID": "minutes/2023-10-23/index.html",
    "href": "minutes/2023-10-23/index.html",
    "title": "Minutes 2023-10-23",
    "section": "",
    "text": "View Attendee List\n\n\n\n\n\n\nGeorge Stagg (Posit)\nIsmael Alejandro Rodriguez Rodriguez (Appsilon)\nPaweł Rzymkiewicz (Appsilon)\nPedro Silva (Appsilon)\nSam Parmar (Pfizer)"
  },
  {
    "objectID": "minutes/2023-10-23/index.html#appsilon-sprint-recap",
    "href": "minutes/2023-10-23/index.html#appsilon-sprint-recap",
    "title": "Minutes 2023-10-23",
    "section": "Appsilon Sprint Recap",
    "text": "Appsilon Sprint Recap\n\nWhile golem and rhino are not currently supported, they are able to use the box package to mimic rhino structure, and they picked a modular structure\nThey had issues with shinylive not liking non-R files, George would like a reproducible example. George says to make sure they are on the latest version of shinylive\nissues with using cowplot as-is when it is deployed on Netlify, but running locally it is fine. George thingks it could be an issue with Netlify limiting the size of assets\nSam: Oh, we might need to make sure we document the port the app will use. Wonder if it is possible that FDA might block it or be using it for another app?\nThey have a build script that will pull down the packages from the webR package binary site\nGeorge:\n\nDefault behavior is that shinylive will download packages from a CDN\nGoing forward: packages will be distributed with the app automatically\nOnce this is implemented, everything will be relative and no external dependencies\nPackages loading slowly because traditionally binary packages are transferred as compressed tar.gz files. R tries to use an untarring program to unpack on disk. Webassembly cannot use tar, it does not exist in virtual file system. It is slow because it is using a fallback in R itself\nThey are working on ways to load packages faster in webR. They will make use of the enscriptem file system API to mount system images on the filesystem. No extraction step is needed with this new approach\nenscriptem data file system images. George will update the public binary site\nDocker image will be available to help build packages into this new framework\nGeorge is writing an R package to help build library into a single data image\nDev version of webR has webR::mount(“/shiny”, “http://local/shiny.data”)"
  },
  {
    "objectID": "minutes/2024-03-08/index.html",
    "href": "minutes/2024-03-08/index.html",
    "title": "Minutes 2024-03-08",
    "section": "",
    "text": "View Attendee List\n\n\n\n\n\n\nBen Straub (GSK)\nEric Nantz (Eli Lilly)\nNate Mockler (Biogen)\nSam Parmar (Pfizer)"
  },
  {
    "objectID": "minutes/2024-03-08/index.html#meeting-minutes",
    "href": "minutes/2024-03-08/index.html#meeting-minutes",
    "title": "Minutes 2024-03-08",
    "section": "Meeting Minutes",
    "text": "Meeting Minutes\n\nEric shared the status of his initial tests of the web-assembly version of the application available at https://github.com/RConsortium/submissions-pilot4-webR\n\nApplication works successfully when using work computer browser (Edge), however on his Linux machine certain browsers (Edge) were not able to view the application, while other chrome-variant browsers had no issue\nSam mentioned he encountered a few issues running the app in his work browser, but was successful after discussions with IT\nAdditional testing will be paramount prior to transfer to FDA\nEric will prepare the repository with a few minor enhancements in preparation for wider testing amongst the group. Ben mentioned that with the Pilot 3 effort winding down, there could be additional resources available for testing soon.\n\nWhen the web-R binary packages are being pulled down from the webR CDN, there isn’t a clear way to pin those to a specific version, unlike renv when we can indeed control versions of packages installed. A comment on a separate issue https://github.com/posit-dev/r-shinylive/issues/56 indicates there will be a future state when pinning package versions is possible.\nBen mentioned an issue they encountered with the emmeans package being updated such that it requires R version 4.3 or greater. We leverage this package in the pilot 4 app. Eric’s testing did not encounter any issues with this package, but this note has been logged in the issue tracker for awareness.\nIt is unclear whether that will change, but we will be interested in a future keynote presentation from George Stagg at the upcoming ShinyConf 2024 which is going to address reproducibility in the context of web-assembly and web-R.\nWith the latest CRAN releases of shinylive and httpuv, the pilot 4 setup instructions will ensure the CRAN releases for this packages are installed by the user prior to running the web-assembly version of the application\nWhen the web-assembly version of the application is created, the bundle is essentially a massive collection of JavaScript files\nIt is not clear yet whether compiling the web-assembly application results in differences between operating systems.\nWhile the current pilot 4 web-assembly repository contains a pre-made bundle of the application (built using the suppleid build.R script), we need to verify with FDA if having JavaScript files in the .zip archive of the repository is acceptable for transfer in the eCTD gateway.\nThe ADRG for pilot 4 will leverage existing material from the pilot 2 ADRG, with the majority of updates landing in the installation instructions.\nThe group agreed to have a separate repository created that is tailored for the actual transfer, following a similar mechanism as Pilot 2. Ben mentioned the approach worked well for Pilot 3.\nThe group acknowledges that asking the FDA review to inspect the JavaScript bundle to find the application R code would be very difficult. Therefore the ADRG will include instructions for running the application in the traditional method of launching an R session (bootstrapped with renv) and executing shiny::runApp() much like Pilot 2.\nNext steps for the pilot include:\n\nElicit additional testers for the web-assembly application in the Slack channel\nEric to bootstrap the Windows virtual machine testing environment in a similar fashion as pilot 2’s custom testing environment.\nCreate a new repository for the FDA-ready version of the web-assembly application\nInitialize a draft of the ADRG"
  }
]